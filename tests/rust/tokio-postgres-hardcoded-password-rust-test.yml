id: tokio-postgres-hardcoded-password-rust
valid:
  - |
     async fn test1() -> Result<(), anyhow::Error> {
     let mut config = tokio_postgres::Config::new();
     config
     .host(std::env::var("HOST").expect("set HOST"))
     .user(std::env::var("USER").expect("set USER"))
     .password("")
     .port(std::env::var("PORT").expect("set PORT"));
     Ok(())
     }
invalid:
  - |
     fn test1() {
     let mut config = postgres::Config::new();
     as = "hardcoded-password";
     config
      .host(std::env::var("HOST").expect("set HOST"))
      .user(std::env::var("USER").expect("set USER"))
      .password(as)
      .port(std::env::var("PORT").expect("set PORT"));
     let client = config.connect(NoTls).unwrap();
     Ok(())
     }
  - |
     fn test2() {
     asa = "cvsdgsdvvbdfbd";
     let (client, connection) = postgres::Config::new()
     .host(shard_host_name.as_str())
     .user("postgres")
     .password(asa)
     .dbname("moray")
     .keepalives_idle(std::time::Duration::from_secs(30))
     .connect(NoTls);
     Ok(())
     }
  - |
     fn test1() {
     let mut config = postgres::Config::new();
     config
      .host(std::env::var("HOST").expect("set HOST"))
      .user(std::env::var("USER").expect("set USER"))
      .password("hardcoded-password")
      .port(std::env::var("PORT").expect("set PORT"));
     let client = config.connect(NoTls).unwrap();
     Ok(())
     }
  - |
     fn test2() {
     let (client, connection) = postgres::Config::new()
     .host(shard_host_name.as_str())
     .user("postgres")
     .password("hardcoded-password")
     .dbname("moray")
     .keepalives_idle(std::time::Duration::from_secs(30))
     .connect(NoTls);
     Ok(())
     }