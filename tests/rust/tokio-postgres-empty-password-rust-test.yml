id: tokio-postgres-empty-password-rust
valid:
  - |
     let mut config = tokio_postgres::Config::new();
     config
     .host(std::env::var("HOST").expect("set HOST"))
     .user(std::env::var("USER").expect("set USER"))
     .password(std::env::var("PASSWORD").expect("set PASSWORD"))
     .port(std::env::var("PORT").expect("set PORT"));
     let (client, connection) = config.connect(NoTls).await?;
     tokio::spawn(async move {
     if let Err(e) = connection.await {
     tracing::error!("postgres db connection error: {}", e);
     }
     });
     Ok(())
     }
invalid:
  - |
     async fn test1() -> Result<(), anyhow::Error> {
     let mut config = tokio_postgres::Config::new();
     config
     .host(std::env::var("HOST").expect("set HOST"))
     .user(std::env::var("USER").expect("set USER"))
     .password("")
     .port(std::env::var("PORT").expect("set PORT"));
     Ok(())
     }
  - |
     async fn test1() -> Result<(), anyhow::Error> {
     let mut config = tokio_postgres::Config::new();
     as = "";
     config
      .host(std::env::var("HOST").expect("set HOST"))
      .user(std::env::var("USER").expect("set USER"))
      .password(as)
      .port(std::env::var("PORT").expect("set PORT"));
     let (client, connection) = config.connect(NoTls).await?;
     tokio::spawn(async move {
      if let Err(e) = connection.await {
      tracing::error!("postgres db connection error: {}", e);
      }
     });
     Ok(())
     }
  - |
     async fn test2() -> Result<(), anyhow::Error> {
     as = "";
     let (client, connection) = tokio_postgres::Config::new()
     .host(shard_host_name.as_str())
     .user("postgres")
     .password(as)
     .dbname("ninja")
     .keepalives_idle(std::time::Duration::from_secs(30))
     .connect(NoTls)
     .await
     .map_err(|e| {
        error!(log, "failed to connect to {}: {}", &shard_host_name, e);
        Error::new(ErrorKind::Other, e)
     })?;
     tokio::spawn(async move {
      if let Err(e) = connection.await {
      tracing::error!("postgres db connection error: {}", e);
      }
     });
  - |
     async fn test2() -> Result<(), anyhow::Error> {
     let (client, connection) = tokio_postgres::Config::new()
     .host(shard_host_name.as_str())
     .user("postgres")
     .password("")
     .dbname("ninja")
     .keepalives_idle(std::time::Duration::from_secs(30))
     .connect(NoTls)
     .await
     .map_err(|e| {
        error!(log, "failed to connect to {}: {}", &shard_host_name, e);
        Error::new(ErrorKind::Other, e)
     })?;