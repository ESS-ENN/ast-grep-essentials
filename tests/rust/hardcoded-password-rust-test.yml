id: hardcoded-password-rust
valid:
  - |
    async fn ok_test1() -> Result<(), sqlx::Error> {
    let conn = MySqlConnectOptions::new()
      .host("localhost")
      .username("root")
      .password(env!("pwd"))
      .database("db")
      .connect().await?;
    use_connection(conn);
    Ok(())
    }
invalid:
  - |
    use sqlx::mysql::{MySqlConnectOptions, MySqlConnection, MySqlPool, MySqlSslMode};
    async fn test1() -> Result<(), sqlx::Error> {
    let conn = MySqlConnectOptions::new()
    .host("localhost")
    .username("root")
    .password("password")
    .database("db")
    .connect().await?;
     use_connection(conn);
     Ok(())
    }
  - |
    use sqlx::postgres::{PgConnectOptions, PgConnection, PgPool, PgSslMode};
    async fn test2() -> Result<(), sqlx::Error> {
    let conn = PgConnectOptions::new()
    .host("secret-host")
    .port(2525)
    .username("secret-user")
    .password("secret-password")
    .ssl_mode(PgSslMode::Require)
    .connect()
    .await?;
    use_connection(conn);
    Ok(())
    }
  - |
    use sqlx::postgres::{PgConnectOptions, PgConnection, PgPool, PgSslMode};
    async fn test3() -> Result<(), sqlx::Error> {
    let pg = PgConnectOptions::new();
    let conn = pg.host("secret-host")
    .port(2525)
    .username("secret-user")
    .password("secret-password")
    .ssl_mode(PgSslMode::Require)
    .connect()
    .await?;
    use_connection(conn);
    Ok(())
    }
