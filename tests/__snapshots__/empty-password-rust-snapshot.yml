id: empty-password-rust
snapshots:
  ? |
    use sqlx::mysql::{MySqlConnectOptions, MySqlConnection, MySqlPool, MySqlSslMode};
    async fn test1() -> Result<(), sqlx::Error> {
    let conn = MySqlConnectOptions::new()
    .host("localhost")
    .username("root")
    .password("")
    .database("db")
    .connect().await?;
     use_connection(conn);
     Ok(())
    }
  : labels:
    - source: |-
        MySqlConnectOptions::new()
        .host("localhost")
        .username("root")
        .password("")
      style: primary
      start: 139
      end: 216
    - source: MySqlConnectOptions
      style: secondary
      start: 139
      end: 158
    - source: new
      style: secondary
      start: 160
      end: 163
    - source: MySqlConnectOptions::new
      style: secondary
      start: 139
      end: 163
    - source: ("root")
      style: secondary
      start: 194
      end: 202
    - source: |-
        MySqlConnectOptions::new()
        .host("localhost")
        .username("root")
      style: secondary
      start: 139
      end: 202
    - source: |-
        MySqlConnectOptions::new()
        .host("localhost")
        .username("root")
        .password
      style: secondary
      start: 139
      end: 212
    - source: '""'
      style: secondary
      start: 213
      end: 215
    - source: ("")
      style: secondary
      start: 212
      end: 216
    - source: sqlx
      style: secondary
      start: 4
      end: 8
    - source: mysql
      style: secondary
      start: 10
      end: 15
    - source: sqlx::mysql
      style: secondary
      start: 4
      end: 15
    - source: MySqlConnectOptions
      style: secondary
      start: 18
      end: 37
    - source: MySqlConnection
      style: secondary
      start: 39
      end: 54
    - source: MySqlPool
      style: secondary
      start: 56
      end: 65
    - source: MySqlSslMode
      style: secondary
      start: 67
      end: 79
    - source: '{MySqlConnectOptions, MySqlConnection, MySqlPool, MySqlSslMode}'
      style: secondary
      start: 17
      end: 80
    - source: sqlx::mysql::{MySqlConnectOptions, MySqlConnection, MySqlPool, MySqlSslMode}
      style: secondary
      start: 4
      end: 80
    - source: use sqlx::mysql::{MySqlConnectOptions, MySqlConnection, MySqlPool, MySqlSslMode};
      style: secondary
      start: 0
      end: 81
    - source: |-
        async fn test1() -> Result<(), sqlx::Error> {
        let conn = MySqlConnectOptions::new()
        .host("localhost")
        .username("root")
        .password("")
        .database("db")
        .connect().await?;
         use_connection(conn);
         Ok(())
        }
      style: secondary
      start: 82
      end: 284
    - source: |-
        let conn = MySqlConnectOptions::new()
        .host("localhost")
        .username("root")
        .password("")
        .database("db")
        .connect().await?;
      style: secondary
      start: 128
      end: 251
    - source: |-
        MySqlConnectOptions::new()
        .host("localhost")
        .username("root")
        .password("")
        .database("db")
        .connect().await?
      style: secondary
      start: 139
      end: 250
    - source: |-
        MySqlConnectOptions::new()
        .host("localhost")
        .username("root")
        .password("")
        .database("db")
        .connect().await
      style: secondary
      start: 139
      end: 249
    - source: ()
      style: secondary
      start: 241
      end: 243
    - source: |-
        MySqlConnectOptions::new()
        .host("localhost")
        .username("root")
        .password("")
        .database("db")
        .connect()
      style: secondary
      start: 139
      end: 243
    - source: connect
      style: secondary
      start: 234
      end: 241
    - source: |-
        MySqlConnectOptions::new()
        .host("localhost")
        .username("root")
        .password("")
        .database("db")
        .connect
      style: secondary
      start: 139
      end: 241
    - source: ("db")
      style: secondary
      start: 226
      end: 232
    - source: |-
        MySqlConnectOptions::new()
        .host("localhost")
        .username("root")
        .password("")
        .database("db")
      style: secondary
      start: 139
      end: 232
    - source: database
      style: secondary
      start: 218
      end: 226
    - source: |-
        MySqlConnectOptions::new()
        .host("localhost")
        .username("root")
        .password("")
        .database
      style: secondary
      start: 139
      end: 226
  ? |
    use sqlx::postgres::{PgConnectOptions, PgConnection, PgPool, PgSslMode};
    async fn test2() -> Result<(), sqlx::Error> {
    let conn = PgConnectOptions::new()
    .host("secret-host")
    .port(2525)
    .username("secret-user")
    .password("")
    .ssl_mode(PgSslMode::Require)
    .connect()
    .await?;
    use_connection(conn);
    Ok(())
    }
  : labels:
    - source: |-
        PgConnectOptions::new()
        .host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
      style: primary
      start: 130
      end: 225
    - source: PgConnectOptions
      style: secondary
      start: 130
      end: 146
    - source: new
      style: secondary
      start: 148
      end: 151
    - source: PgConnectOptions::new
      style: secondary
      start: 130
      end: 151
    - source: ("secret-user")
      style: secondary
      start: 196
      end: 211
    - source: |-
        PgConnectOptions::new()
        .host("secret-host")
        .port(2525)
        .username("secret-user")
      style: secondary
      start: 130
      end: 211
    - source: |-
        PgConnectOptions::new()
        .host("secret-host")
        .port(2525)
        .username("secret-user")
        .password
      style: secondary
      start: 130
      end: 221
    - source: ("")
      style: secondary
      start: 221
      end: 225
    - source: sqlx
      style: secondary
      start: 4
      end: 8
    - source: postgres
      style: secondary
      start: 10
      end: 18
    - source: sqlx::postgres
      style: secondary
      start: 4
      end: 18
    - source: PgConnectOptions
      style: secondary
      start: 21
      end: 37
    - source: PgConnection
      style: secondary
      start: 39
      end: 51
    - source: PgPool
      style: secondary
      start: 53
      end: 59
    - source: PgSslMode
      style: secondary
      start: 61
      end: 70
    - source: '{PgConnectOptions, PgConnection, PgPool, PgSslMode}'
      style: secondary
      start: 20
      end: 71
    - source: sqlx::postgres::{PgConnectOptions, PgConnection, PgPool, PgSslMode}
      style: secondary
      start: 4
      end: 71
    - source: use sqlx::postgres::{PgConnectOptions, PgConnection, PgPool, PgSslMode};
      style: secondary
      start: 0
      end: 72
    - source: |-
        async fn test2() -> Result<(), sqlx::Error> {
        let conn = PgConnectOptions::new()
        .host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
        .ssl_mode(PgSslMode::Require)
        .connect()
        .await?;
        use_connection(conn);
        Ok(())
        }
      style: secondary
      start: 73
      end: 306
    - source: |-
        let conn = PgConnectOptions::new()
        .host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
        .ssl_mode(PgSslMode::Require)
        .connect()
        .await?;
      style: secondary
      start: 119
      end: 275
    - source: |-
        PgConnectOptions::new()
        .host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
        .ssl_mode(PgSslMode::Require)
        .connect()
        .await?
      style: secondary
      start: 130
      end: 274
    - source: |-
        PgConnectOptions::new()
        .host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
        .ssl_mode(PgSslMode::Require)
        .connect()
        .await
      style: secondary
      start: 130
      end: 273
    - source: ()
      style: secondary
      start: 264
      end: 266
    - source: |-
        PgConnectOptions::new()
        .host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
        .ssl_mode(PgSslMode::Require)
        .connect()
      style: secondary
      start: 130
      end: 266
    - source: connect
      style: secondary
      start: 257
      end: 264
    - source: |-
        PgConnectOptions::new()
        .host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
        .ssl_mode(PgSslMode::Require)
        .connect
      style: secondary
      start: 130
      end: 264
    - source: (PgSslMode::Require)
      style: secondary
      start: 235
      end: 255
    - source: |-
        PgConnectOptions::new()
        .host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
        .ssl_mode(PgSslMode::Require)
      style: secondary
      start: 130
      end: 255
    - source: ssl_mode
      style: secondary
      start: 227
      end: 235
    - source: |-
        PgConnectOptions::new()
        .host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
        .ssl_mode
      style: secondary
      start: 130
      end: 235
  ? |
    use sqlx::postgres::{PgConnectOptions, PgConnection, PgPool, PgSslMode};
    async fn test3() -> Result<(), sqlx::Error> {
    let pg = PgConnectOptions::new();
    let conn = pg.host("secret-host")
    .port(2525)
    .username("secret-user")
    .password("")
    .ssl_mode(PgSslMode::Require)
    .connect()
    .await?;
    use_connection(conn);
    Ok(())
    }
  : labels:
    - source: |-
        pg.host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
      style: primary
      start: 164
      end: 237
    - source: pg
      style: secondary
      start: 164
      end: 166
    - source: username
      style: secondary
      start: 200
      end: 208
    - source: |-
        pg.host("secret-host")
        .port(2525)
        .username
      style: secondary
      start: 164
      end: 208
    - source: |-
        pg.host("secret-host")
        .port(2525)
        .username("secret-user")
      style: secondary
      start: 164
      end: 223
    - source: password
      style: secondary
      start: 225
      end: 233
    - source: |-
        pg.host("secret-host")
        .port(2525)
        .username("secret-user")
        .password
      style: secondary
      start: 164
      end: 233
    - source: ("")
      style: secondary
      start: 233
      end: 237
    - source: sqlx
      style: secondary
      start: 4
      end: 8
    - source: postgres
      style: secondary
      start: 10
      end: 18
    - source: sqlx::postgres
      style: secondary
      start: 4
      end: 18
    - source: PgConnectOptions
      style: secondary
      start: 21
      end: 37
    - source: PgConnection
      style: secondary
      start: 39
      end: 51
    - source: PgPool
      style: secondary
      start: 53
      end: 59
    - source: PgSslMode
      style: secondary
      start: 61
      end: 70
    - source: '{PgConnectOptions, PgConnection, PgPool, PgSslMode}'
      style: secondary
      start: 20
      end: 71
    - source: sqlx::postgres::{PgConnectOptions, PgConnection, PgPool, PgSslMode}
      style: secondary
      start: 4
      end: 71
    - source: use sqlx::postgres::{PgConnectOptions, PgConnection, PgPool, PgSslMode};
      style: secondary
      start: 0
      end: 72
    - source: |-
        async fn test3() -> Result<(), sqlx::Error> {
        let pg = PgConnectOptions::new();
        let conn = pg.host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
        .ssl_mode(PgSslMode::Require)
        .connect()
        .await?;
        use_connection(conn);
        Ok(())
        }
      style: secondary
      start: 73
      end: 318
    - source: pg
      style: secondary
      start: 123
      end: 125
    - source: PgConnectOptions
      style: secondary
      start: 128
      end: 144
    - source: new
      style: secondary
      start: 146
      end: 149
    - source: PgConnectOptions::new
      style: secondary
      start: 128
      end: 149
    - source: ()
      style: secondary
      start: 149
      end: 151
    - source: PgConnectOptions::new()
      style: secondary
      start: 128
      end: 151
    - source: let pg = PgConnectOptions::new();
      style: secondary
      start: 119
      end: 152
    - source: |-
        let conn = pg.host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
        .ssl_mode(PgSslMode::Require)
        .connect()
        .await?;
      style: secondary
      start: 153
      end: 287
    - source: |-
        pg.host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
        .ssl_mode(PgSslMode::Require)
        .connect()
        .await?
      style: secondary
      start: 164
      end: 286
    - source: |-
        pg.host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
        .ssl_mode(PgSslMode::Require)
        .connect()
        .await
      style: secondary
      start: 164
      end: 285
    - source: ()
      style: secondary
      start: 276
      end: 278
    - source: |-
        pg.host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
        .ssl_mode(PgSslMode::Require)
        .connect()
      style: secondary
      start: 164
      end: 278
    - source: connect
      style: secondary
      start: 269
      end: 276
    - source: |-
        pg.host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
        .ssl_mode(PgSslMode::Require)
        .connect
      style: secondary
      start: 164
      end: 276
    - source: (PgSslMode::Require)
      style: secondary
      start: 247
      end: 267
    - source: |-
        pg.host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
        .ssl_mode(PgSslMode::Require)
      style: secondary
      start: 164
      end: 267
    - source: ssl_mode
      style: secondary
      start: 239
      end: 247
    - source: |-
        pg.host("secret-host")
        .port(2525)
        .username("secret-user")
        .password("")
        .ssl_mode
      style: secondary
      start: 164
      end: 247
