id: jwt-hardcoded-secret-csharp
snapshots:
  ? |
    using JWT;
    using JWT.Builder;
    namespace Example.Foobar;
    public class Foobar
    {
    public void JwtTest1()
     {
         var payload = new Dictionary<string, object>
         {
             { "claim1", 0 },
             { "claim2", "claim2-value" }
         };
         IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
         IJsonSerializer serializer = new JsonNetSerializer();
         IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
         IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
         const string key = "razdvatri";
         var token = encoder.Encode(payload, key);
         Console.WriteLine(token);
     }
    }
  : labels:
    - source: encoder.Encode(payload, key)
      style: primary
      start: 545
      end: 573
    - source: IJwtEncoder
      style: secondary
      start: 418
      end: 429
    - source: encoder
      style: secondary
      start: 430
      end: 437
    - source: new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 440
      end: 489
    - source: encoder = new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 430
      end: 489
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 418
      end: 489
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
      style: secondary
      start: 418
      end: 490
    - source: key
      style: secondary
      start: 509
      end: 512
    - source: razdvatri
      style: secondary
      start: 516
      end: 525
    - source: '"razdvatri"'
      style: secondary
      start: 515
      end: 526
    - source: key = "razdvatri"
      style: secondary
      start: 509
      end: 526
    - source: |-
        public void JwtTest1()
         {
             var payload = new Dictionary<string, object>
             {
                 { "claim1", 0 },
                 { "claim2", "claim2-value" }
             };
             IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
             IJsonSerializer serializer = new JsonNetSerializer();
             IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
             IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
             const string key = "razdvatri";
             var token = encoder.Encode(payload, key);
             Console.WriteLine(token);
         }
      style: secondary
      start: 78
      end: 608
    - source: Encode
      style: secondary
      start: 553
      end: 559
    - source: encoder
      style: secondary
      start: 545
      end: 552
    - source: encoder.Encode
      style: secondary
      start: 545
      end: 559
    - source: payload
      style: secondary
      start: 560
      end: 567
    - source: key
      style: secondary
      start: 569
      end: 572
    - source: key
      style: secondary
      start: 569
      end: 572
    - source: (payload, key)
      style: secondary
      start: 559
      end: 573
    - source: JWT
      style: secondary
      start: 17
      end: 20
    - source: Builder
      style: secondary
      start: 21
      end: 28
    - source: JWT.Builder
      style: secondary
      start: 17
      end: 28
    - source: using JWT.Builder;
      style: secondary
      start: 11
      end: 29
    - source: |
        using JWT;
        using JWT.Builder;
        namespace Example.Foobar;
        public class Foobar
        {
        public void JwtTest1()
         {
             var payload = new Dictionary<string, object>
             {
                 { "claim1", 0 },
                 { "claim2", "claim2-value" }
             };
             IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
             IJsonSerializer serializer = new JsonNetSerializer();
             IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
             IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
             const string key = "razdvatri";
             var token = encoder.Encode(payload, key);
             Console.WriteLine(token);
         }
        }
      style: secondary
      start: 0
      end: 611
  ? |
    using JWT;
    using JWT.Builder;
    namespace Example.Foobar;
    public class Foobar
    {
    public void JwtTest13()
         {
             IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
             IJsonSerializer serializer = new JsonNetSerializer();
             IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
             IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
             var token = encoder.Encode(new Dictionary<string, object>
             {
                 { "user", "alice" },
                 { "permissions", "read, write" }
             }, "hardcodedJWTSecret987");
             Console.WriteLine(token);
         }}
  : labels:
    - source: |-
        encoder.Encode(new Dictionary<string, object>
                 {
                     { "user", "alice" },
                     { "permissions", "read, write" }
                 }, "hardcodedJWTSecret987")
      style: primary
      start: 404
      end: 577
    - source: IJwtEncoder
      style: secondary
      start: 310
      end: 321
    - source: encoder
      style: secondary
      start: 322
      end: 329
    - source: new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 332
      end: 381
    - source: encoder = new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 322
      end: 381
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 310
      end: 381
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
      style: secondary
      start: 310
      end: 382
    - source: |-
        public void JwtTest13()
             {
                 IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
                 IJsonSerializer serializer = new JsonNetSerializer();
                 IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
                 IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
                 var token = encoder.Encode(new Dictionary<string, object>
                 {
                     { "user", "alice" },
                     { "permissions", "read, write" }
                 }, "hardcodedJWTSecret987");
                 Console.WriteLine(token);
             }
      style: secondary
      start: 78
      end: 620
    - source: Encode
      style: secondary
      start: 412
      end: 418
    - source: encoder
      style: secondary
      start: 404
      end: 411
    - source: encoder.Encode
      style: secondary
      start: 404
      end: 418
    - source: hardcodedJWTSecret987
      style: secondary
      start: 554
      end: 575
    - source: '"hardcodedJWTSecret987"'
      style: secondary
      start: 553
      end: 576
    - source: '"hardcodedJWTSecret987"'
      style: secondary
      start: 553
      end: 576
    - source: |-
        (new Dictionary<string, object>
                 {
                     { "user", "alice" },
                     { "permissions", "read, write" }
                 }, "hardcodedJWTSecret987")
      style: secondary
      start: 418
      end: 577
    - source: JWT
      style: secondary
      start: 17
      end: 20
    - source: Builder
      style: secondary
      start: 21
      end: 28
    - source: JWT.Builder
      style: secondary
      start: 17
      end: 28
    - source: using JWT.Builder;
      style: secondary
      start: 11
      end: 29
    - source: |
        using JWT;
        using JWT.Builder;
        namespace Example.Foobar;
        public class Foobar
        {
        public void JwtTest13()
             {
                 IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
                 IJsonSerializer serializer = new JsonNetSerializer();
                 IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
                 IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
                 var token = encoder.Encode(new Dictionary<string, object>
                 {
                     { "user", "alice" },
                     { "permissions", "read, write" }
                 }, "hardcodedJWTSecret987");
                 Console.WriteLine(token);
             }}
      style: secondary
      start: 0
      end: 622
  ? |
    using JWT;
    using JWT.Builder;
    namespace Example.Foobar;
    public class Foobar
    {
    public void JwtTest17()
         {
             IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
             IJsonSerializer serializer = new JsonNetSerializer();
             IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
             IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
             var token = encoder.Encode(new Dictionary<string, object>
             {
                 { "sub", "user123" },
                 { "scope", "admin" }
             }, "secretkey2024");

             Console.WriteLine(token);
         }}
  : labels:
    - source: |-
        encoder.Encode(new Dictionary<string, object>
                 {
                     { "sub", "user123" },
                     { "scope", "admin" }
                 }, "secretkey2024")
      style: primary
      start: 404
      end: 558
    - source: IJwtEncoder
      style: secondary
      start: 310
      end: 321
    - source: encoder
      style: secondary
      start: 322
      end: 329
    - source: new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 332
      end: 381
    - source: encoder = new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 322
      end: 381
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 310
      end: 381
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
      style: secondary
      start: 310
      end: 382
    - source: |-
        public void JwtTest17()
             {
                 IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
                 IJsonSerializer serializer = new JsonNetSerializer();
                 IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
                 IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
                 var token = encoder.Encode(new Dictionary<string, object>
                 {
                     { "sub", "user123" },
                     { "scope", "admin" }
                 }, "secretkey2024");

                 Console.WriteLine(token);
             }
      style: secondary
      start: 78
      end: 602
    - source: Encode
      style: secondary
      start: 412
      end: 418
    - source: encoder
      style: secondary
      start: 404
      end: 411
    - source: encoder.Encode
      style: secondary
      start: 404
      end: 418
    - source: secretkey2024
      style: secondary
      start: 543
      end: 556
    - source: '"secretkey2024"'
      style: secondary
      start: 542
      end: 557
    - source: '"secretkey2024"'
      style: secondary
      start: 542
      end: 557
    - source: |-
        (new Dictionary<string, object>
                 {
                     { "sub", "user123" },
                     { "scope", "admin" }
                 }, "secretkey2024")
      style: secondary
      start: 418
      end: 558
    - source: JWT
      style: secondary
      start: 17
      end: 20
    - source: Builder
      style: secondary
      start: 21
      end: 28
    - source: JWT.Builder
      style: secondary
      start: 17
      end: 28
    - source: using JWT.Builder;
      style: secondary
      start: 11
      end: 29
    - source: |
        using JWT;
        using JWT.Builder;
        namespace Example.Foobar;
        public class Foobar
        {
        public void JwtTest17()
             {
                 IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
                 IJsonSerializer serializer = new JsonNetSerializer();
                 IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
                 IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
                 var token = encoder.Encode(new Dictionary<string, object>
                 {
                     { "sub", "user123" },
                     { "scope", "admin" }
                 }, "secretkey2024");

                 Console.WriteLine(token);
             }}
      style: secondary
      start: 0
      end: 604
  ? |
    using JWT;
    using JWT.Builder;
    namespace Example.Foobar;
    public class Foobar
    {
    public void JwtTest2()
     {
         IJsonSerializer serializer = new JsonNetSerializer();
         IDateTimeProvider provider = new UtcDateTimeProvider();
         IJwtValidator validator = new JwtValidator(serializer, provider);
         IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
         IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
         IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);
         var json = decoder.Decode(token, "secret123");
         Console.WriteLine(json);
     }
    }
  : labels:
    - source: decoder.Decode(token, "secret123")
      style: primary
      start: 521
      end: 555
    - source: Decode
      style: secondary
      start: 529
      end: 535
    - source: decoder
      style: secondary
      start: 521
      end: 528
    - source: decoder.Decode
      style: secondary
      start: 521
      end: 535
    - source: secret123
      style: secondary
      start: 544
      end: 553
    - source: '"secret123"'
      style: secondary
      start: 543
      end: 554
    - source: '"secret123"'
      style: secondary
      start: 543
      end: 554
    - source: (token, "secret123")
      style: secondary
      start: 535
      end: 555
    - source: decoder
      style: secondary
      start: 433
      end: 440
    - source: decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm)
      style: secondary
      start: 433
      end: 503
    - source: IJwtDecoder
      style: secondary
      start: 421
      end: 432
    - source: IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm)
      style: secondary
      start: 421
      end: 503
    - source: IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);
      style: secondary
      start: 421
      end: 504
    - source: |-
        public void JwtTest2()
         {
             IJsonSerializer serializer = new JsonNetSerializer();
             IDateTimeProvider provider = new UtcDateTimeProvider();
             IJwtValidator validator = new JwtValidator(serializer, provider);
             IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
             IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
             IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);
             var json = decoder.Decode(token, "secret123");
             Console.WriteLine(json);
         }
      style: secondary
      start: 78
      end: 589
    - source: |-
        {
        public void JwtTest2()
         {
             IJsonSerializer serializer = new JsonNetSerializer();
             IDateTimeProvider provider = new UtcDateTimeProvider();
             IJwtValidator validator = new JwtValidator(serializer, provider);
             IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
             IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
             IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);
             var json = decoder.Decode(token, "secret123");
             Console.WriteLine(json);
         }
        }
      style: secondary
      start: 76
      end: 591
    - source: JWT
      style: secondary
      start: 6
      end: 9
    - source: using JWT;
      style: secondary
      start: 0
      end: 10
    - source: |
        using JWT;
        using JWT.Builder;
        namespace Example.Foobar;
        public class Foobar
        {
        public void JwtTest2()
         {
             IJsonSerializer serializer = new JsonNetSerializer();
             IDateTimeProvider provider = new UtcDateTimeProvider();
             IJwtValidator validator = new JwtValidator(serializer, provider);
             IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
             IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
             IJwtDecoder decoder = new JwtDecoder(serializer, validator, urlEncoder, algorithm);
             var json = decoder.Decode(token, "secret123");
             Console.WriteLine(json);
         }
        }
      style: secondary
      start: 0
      end: 592
  ? |
    using JWT;
    using JWT.Builder;
    namespace Example.Foobar;
    public class Foobar
    {
    public void JwtTest20()
         {
             IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
             IJsonSerializer serializer = new JsonNetSerializer();
             IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
             IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
             var token = encoder.Encode(new Dictionary<string, object>
             {
                 { "userId", "999" },
                 { "role", "admin" }
             }, "hardcodedTokenSecret987");
             Console.WriteLine(token);
         }
         }
  : labels:
    - source: |-
        encoder.Encode(new Dictionary<string, object>
                 {
                     { "userId", "999" },
                     { "role", "admin" }
                 }, "hardcodedTokenSecret987")
      style: primary
      start: 404
      end: 566
    - source: IJwtEncoder
      style: secondary
      start: 310
      end: 321
    - source: encoder
      style: secondary
      start: 322
      end: 329
    - source: new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 332
      end: 381
    - source: encoder = new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 322
      end: 381
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder)
      style: secondary
      start: 310
      end: 381
    - source: IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
      style: secondary
      start: 310
      end: 382
    - source: |-
        public void JwtTest20()
             {
                 IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
                 IJsonSerializer serializer = new JsonNetSerializer();
                 IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
                 IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
                 var token = encoder.Encode(new Dictionary<string, object>
                 {
                     { "userId", "999" },
                     { "role", "admin" }
                 }, "hardcodedTokenSecret987");
                 Console.WriteLine(token);
             }
      style: secondary
      start: 78
      end: 609
    - source: Encode
      style: secondary
      start: 412
      end: 418
    - source: encoder
      style: secondary
      start: 404
      end: 411
    - source: encoder.Encode
      style: secondary
      start: 404
      end: 418
    - source: hardcodedTokenSecret987
      style: secondary
      start: 541
      end: 564
    - source: '"hardcodedTokenSecret987"'
      style: secondary
      start: 540
      end: 565
    - source: '"hardcodedTokenSecret987"'
      style: secondary
      start: 540
      end: 565
    - source: |-
        (new Dictionary<string, object>
                 {
                     { "userId", "999" },
                     { "role", "admin" }
                 }, "hardcodedTokenSecret987")
      style: secondary
      start: 418
      end: 566
    - source: JWT
      style: secondary
      start: 17
      end: 20
    - source: Builder
      style: secondary
      start: 21
      end: 28
    - source: JWT.Builder
      style: secondary
      start: 17
      end: 28
    - source: using JWT.Builder;
      style: secondary
      start: 11
      end: 29
    - source: |
        using JWT;
        using JWT.Builder;
        namespace Example.Foobar;
        public class Foobar
        {
        public void JwtTest20()
             {
                 IJwtAlgorithm algorithm = new HMACSHA256Algorithm();
                 IJsonSerializer serializer = new JsonNetSerializer();
                 IBase64UrlEncoder urlEncoder = new JwtBase64UrlEncoder();
                 IJwtEncoder encoder = new JwtEncoder(algorithm, serializer, urlEncoder);
                 var token = encoder.Encode(new Dictionary<string, object>
                 {
                     { "userId", "999" },
                     { "role", "admin" }
                 }, "hardcodedTokenSecret987");
                 Console.WriteLine(token);
             }
             }
      style: secondary
      start: 0
      end: 617
