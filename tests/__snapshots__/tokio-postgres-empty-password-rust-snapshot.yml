id: tokio-postgres-empty-password-rust
snapshots:
  ? |
    async fn test1() -> Result<(), anyhow::Error> {
    let mut config = tokio_postgres::Config::new();
    as = "";
    config
     .host(std::env::var("HOST").expect("set HOST"))
     .user(std::env::var("USER").expect("set USER"))
     .password(as)
     .port(std::env::var("PORT").expect("set PORT"));
    let (client, connection) = config.connect(NoTls).await?;
    tokio::spawn(async move {
     if let Err(e) = connection.await {
     tracing::error!("postgres db connection error: {}", e);
     }
    });
    Ok(())
    }
  : labels:
    - source: |-
        config
         .host(std::env::var("HOST").expect("set HOST"))
         .user(std::env::var("USER").expect("set USER"))
         .password(as)
      style: primary
      start: 105
      end: 224
    - source: config
      style: secondary
      start: 105
      end: 111
    - source: |-
        config
         .host
      style: secondary
      start: 105
      end: 118
    - source: (std::env::var("HOST").expect("set HOST"))
      style: secondary
      start: 118
      end: 160
    - source: |-
        config
         .host(std::env::var("HOST").expect("set HOST"))
      style: secondary
      start: 105
      end: 160
    - source: user
      style: secondary
      start: 163
      end: 167
    - source: |-
        config
         .host(std::env::var("HOST").expect("set HOST"))
         .user
      style: secondary
      start: 105
      end: 167
    - source: (std::env::var("USER").expect("set USER"))
      style: secondary
      start: 167
      end: 209
    - source: |-
        config
         .host(std::env::var("HOST").expect("set HOST"))
         .user(std::env::var("USER").expect("set USER"))
      style: secondary
      start: 105
      end: 209
    - source: password
      style: secondary
      start: 212
      end: 220
    - source: |-
        config
         .host(std::env::var("HOST").expect("set HOST"))
         .user(std::env::var("USER").expect("set USER"))
         .password
      style: secondary
      start: 105
      end: 220
    - source: as
      style: secondary
      start: 221
      end: 223
    - source: (as)
      style: secondary
      start: 220
      end: 224
    - source: config
      style: secondary
      start: 56
      end: 62
    - source: tokio_postgres::Config::new()
      style: secondary
      start: 65
      end: 94
    - source: let mut config = tokio_postgres::Config::new();
      style: secondary
      start: 48
      end: 95
    - source: |-
        config
         .host(std::env::var("HOST").expect("set HOST"))
         .user(std::env::var("USER").expect("set USER"))
         .password(as)
         .port(std::env::var("PORT").expect("set PORT"));
      style: secondary
      start: 105
      end: 274
    - source: as
      style: secondary
      start: 96
      end: 98
    - source: '""'
      style: secondary
      start: 101
      end: 103
    - source: as = ""
      style: secondary
      start: 96
      end: 103
    - source: as = "";
      style: secondary
      start: 96
      end: 104
    - source: |-
        {
        let mut config = tokio_postgres::Config::new();
        as = "";
        config
         .host(std::env::var("HOST").expect("set HOST"))
         .user(std::env::var("USER").expect("set USER"))
         .password(as)
         .port(std::env::var("PORT").expect("set PORT"));
        let (client, connection) = config.connect(NoTls).await?;
        tokio::spawn(async move {
         if let Err(e) = connection.await {
         tracing::error!("postgres db connection error: {}", e);
         }
        });
        Ok(())
        }
      style: secondary
      start: 46
      end: 466
  ? |
    async fn test1() -> Result<(), anyhow::Error> {
    let mut config = tokio_postgres::Config::new();
    config
    .host(std::env::var("HOST").expect("set HOST"))
    .user(std::env::var("USER").expect("set USER"))
    .password("")
    .port(std::env::var("PORT").expect("set PORT"));
    Ok(())
    }
  : labels:
    - source: |-
        config
        .host(std::env::var("HOST").expect("set HOST"))
        .user(std::env::var("USER").expect("set USER"))
        .password("")
      style: primary
      start: 96
      end: 212
    - source: config
      style: secondary
      start: 96
      end: 102
    - source: |-
        config
        .host
      style: secondary
      start: 96
      end: 108
    - source: (std::env::var("HOST").expect("set HOST"))
      style: secondary
      start: 108
      end: 150
    - source: |-
        config
        .host(std::env::var("HOST").expect("set HOST"))
      style: secondary
      start: 96
      end: 150
    - source: user
      style: secondary
      start: 152
      end: 156
    - source: |-
        config
        .host(std::env::var("HOST").expect("set HOST"))
        .user
      style: secondary
      start: 96
      end: 156
    - source: (std::env::var("USER").expect("set USER"))
      style: secondary
      start: 156
      end: 198
    - source: |-
        config
        .host(std::env::var("HOST").expect("set HOST"))
        .user(std::env::var("USER").expect("set USER"))
      style: secondary
      start: 96
      end: 198
    - source: password
      style: secondary
      start: 200
      end: 208
    - source: |-
        config
        .host(std::env::var("HOST").expect("set HOST"))
        .user(std::env::var("USER").expect("set USER"))
        .password
      style: secondary
      start: 96
      end: 208
    - source: '""'
      style: secondary
      start: 209
      end: 211
    - source: ("")
      style: secondary
      start: 208
      end: 212
    - source: config
      style: secondary
      start: 56
      end: 62
    - source: tokio_postgres::Config::new()
      style: secondary
      start: 65
      end: 94
    - source: let mut config = tokio_postgres::Config::new();
      style: secondary
      start: 48
      end: 95
    - source: |-
        config
        .host(std::env::var("HOST").expect("set HOST"))
        .user(std::env::var("USER").expect("set USER"))
        .password("")
        .port(std::env::var("PORT").expect("set PORT"));
      style: secondary
      start: 96
      end: 261
  ? |
    async fn test2() -> Result<(), anyhow::Error> {
    as = "";
    let (client, connection) = tokio_postgres::Config::new()
    .host(shard_host_name.as_str())
    .user("postgres")
    .password(as)
    .dbname("ninja")
    .keepalives_idle(std::time::Duration::from_secs(30))
    .connect(NoTls)
    .await
    .map_err(|e| {
       error!(log, "failed to connect to {}: {}", &shard_host_name, e);
       Error::new(ErrorKind::Other, e)
    })?;
    tokio::spawn(async move {
     if let Err(e) = connection.await {
     tracing::error!("postgres db connection error: {}", e);
     }
    });
  : labels:
    - source: |-
        tokio_postgres::Config::new()
        .host(shard_host_name.as_str())
        .user("postgres")
        .password(as)
      style: primary
      start: 84
      end: 177
    - source: tokio_postgres::Config::new()
      style: secondary
      start: 84
      end: 113
    - source: |-
        tokio_postgres::Config::new()
        .host
      style: secondary
      start: 84
      end: 119
    - source: (shard_host_name.as_str())
      style: secondary
      start: 119
      end: 145
    - source: |-
        tokio_postgres::Config::new()
        .host(shard_host_name.as_str())
      style: secondary
      start: 84
      end: 145
    - source: user
      style: secondary
      start: 147
      end: 151
    - source: |-
        tokio_postgres::Config::new()
        .host(shard_host_name.as_str())
        .user
      style: secondary
      start: 84
      end: 151
    - source: ("postgres")
      style: secondary
      start: 151
      end: 163
    - source: |-
        tokio_postgres::Config::new()
        .host(shard_host_name.as_str())
        .user("postgres")
      style: secondary
      start: 84
      end: 163
    - source: password
      style: secondary
      start: 165
      end: 173
    - source: |-
        tokio_postgres::Config::new()
        .host(shard_host_name.as_str())
        .user("postgres")
        .password
      style: secondary
      start: 84
      end: 173
    - source: as
      style: secondary
      start: 174
      end: 176
    - source: (as)
      style: secondary
      start: 173
      end: 177
    - source: as
      style: secondary
      start: 48
      end: 50
    - source: '""'
      style: secondary
      start: 53
      end: 55
    - source: as = ""
      style: secondary
      start: 48
      end: 55
    - source: as = "";
      style: secondary
      start: 48
      end: 56
    - source: |-
        let (client, connection) = tokio_postgres::Config::new()
        .host(shard_host_name.as_str())
        .user("postgres")
        .password(as)
        .dbname("ninja")
        .keepalives_idle(std::time::Duration::from_secs(30))
        .connect(NoTls)
        .await
        .map_err(|e| {
           error!(log, "failed to connect to {}: {}", &shard_host_name, e);
           Error::new(ErrorKind::Other, e)
        })?;
      style: secondary
      start: 57
      end: 393
  ? |-
    async fn test2() -> Result<(), anyhow::Error> {
    let (client, connection) = tokio_postgres::Config::new()
    .host(shard_host_name.as_str())
    .user("postgres")
    .password("")
    .dbname("ninja")
    .keepalives_idle(std::time::Duration::from_secs(30))
    .connect(NoTls)
    .await
    .map_err(|e| {
       error!(log, "failed to connect to {}: {}", &shard_host_name, e);
       Error::new(ErrorKind::Other, e)
    })?;
  : labels:
    - source: |-
        tokio_postgres::Config::new()
        .host(shard_host_name.as_str())
        .user("postgres")
        .password("")
      style: primary
      start: 75
      end: 168
    - source: tokio_postgres::Config::new()
      style: secondary
      start: 75
      end: 104
    - source: |-
        tokio_postgres::Config::new()
        .host
      style: secondary
      start: 75
      end: 110
    - source: (shard_host_name.as_str())
      style: secondary
      start: 110
      end: 136
    - source: |-
        tokio_postgres::Config::new()
        .host(shard_host_name.as_str())
      style: secondary
      start: 75
      end: 136
    - source: user
      style: secondary
      start: 138
      end: 142
    - source: |-
        tokio_postgres::Config::new()
        .host(shard_host_name.as_str())
        .user
      style: secondary
      start: 75
      end: 142
    - source: ("postgres")
      style: secondary
      start: 142
      end: 154
    - source: |-
        tokio_postgres::Config::new()
        .host(shard_host_name.as_str())
        .user("postgres")
      style: secondary
      start: 75
      end: 154
    - source: password
      style: secondary
      start: 156
      end: 164
    - source: |-
        tokio_postgres::Config::new()
        .host(shard_host_name.as_str())
        .user("postgres")
        .password
      style: secondary
      start: 75
      end: 164
    - source: '""'
      style: secondary
      start: 165
      end: 167
    - source: ("")
      style: secondary
      start: 164
      end: 168
