id: scala-jwt-hardcoded-secret-scala
snapshots:
  ? "import com.auth0.jwt.algorithms.Algorithm\nclass App {\ndef bad1(): Unit = {\ntry {\n  val algorithm = Algorithm.HMAC256(\"secret\")\n  val token = JWT.create()\n    .withIssuer(\"auth0\")\n    .sign(algorithm)\n} catch {\n  case exception: JWTCreationException => \n    println(s\"Error creating JWT: ${exception.getMessage}\")\n}\n}}\n"
  : labels:
    - source: Algorithm.HMAC256("secret")
      style: primary
      start: 99
      end: 126
    - source: Algorithm
      style: secondary
      start: 99
      end: 108
    - source: HMAC256
      style: secondary
      start: 109
      end: 116
    - source: Algorithm.HMAC256
      style: secondary
      start: 99
      end: 116
    - source: '"secret"'
      style: secondary
      start: 117
      end: 125
    - source: ("secret")
      style: secondary
      start: 116
      end: 126
    - source: import com.auth0.jwt.algorithms.Algorithm
      style: secondary
      start: 0
      end: 41
    - source: "import com.auth0.jwt.algorithms.Algorithm\nclass App {\ndef bad1(): Unit = {\ntry {\n  val algorithm = Algorithm.HMAC256(\"secret\")\n  val token = JWT.create()\n    .withIssuer(\"auth0\")\n    .sign(algorithm)\n} catch {\n  case exception: JWTCreationException => \n    println(s\"Error creating JWT: ${exception.getMessage}\")\n}\n}}\n"
      style: secondary
      start: 0
      end: 318
  ? "import com.auth0.jwt.algorithms.Algorithm\nclass AuthService {\n    val secretKey: String = \"anotherDynamicSecretKey\"\n    def createAuthToken(username: String): String = {\n        try {\n            val algorithm = Algorithm.HMAC384(secretKey)\n            val token = JWT.create()\n                .withIssuer(\"auth0\")\n                .withClaim(\"username\", username)\n                .sign(algorithm)\n            token\n        } catch {\n            case e: JWTCreationException => \n        }\n    }\n}\n"
  : labels:
    - source: Algorithm.HMAC384(secretKey)
      style: primary
      start: 212
      end: 240
    - source: Algorithm
      style: secondary
      start: 212
      end: 221
    - source: HMAC384
      style: secondary
      start: 222
      end: 229
    - source: Algorithm.HMAC384
      style: secondary
      start: 212
      end: 229
    - source: secretKey
      style: secondary
      start: 230
      end: 239
    - source: (secretKey)
      style: secondary
      start: 229
      end: 240
    - source: import com.auth0.jwt.algorithms.Algorithm
      style: secondary
      start: 0
      end: 41
    - source: "import com.auth0.jwt.algorithms.Algorithm\nclass AuthService {\n    val secretKey: String = \"anotherDynamicSecretKey\"\n    def createAuthToken(username: String): String = {\n        try {\n            val algorithm = Algorithm.HMAC384(secretKey)\n            val token = JWT.create()\n                .withIssuer(\"auth0\")\n                .withClaim(\"username\", username)\n                .sign(algorithm)\n            token\n        } catch {\n            case e: JWTCreationException => \n        }\n    }\n}\n"
      style: secondary
      start: 0
      end: 496
    - source: secretKey
      style: secondary
      start: 70
      end: 79
    - source: '"anotherDynamicSecretKey"'
      style: secondary
      start: 90
      end: 115
    - source: 'val secretKey: String = "anotherDynamicSecretKey"'
      style: secondary
      start: 66
      end: 115
    - source: "def createAuthToken(username: String): String = {\n        try {\n            val algorithm = Algorithm.HMAC384(secretKey)\n            val token = JWT.create()\n                .withIssuer(\"auth0\")\n                .withClaim(\"username\", username)\n                .sign(algorithm)\n            token\n        } catch {\n            case e: JWTCreationException => \n        }\n    }"
      style: secondary
      start: 120
      end: 493
  ? "import com.auth0.jwt.algorithms.Algorithm\nclass SessionService {\n    val secretKey: String = \"sessionKeySecure\"\n    def createSessionToken(userId: String): String = {\n        try {\n            val algorithm = Algorithm.HMAC512(secretKey)\n            val token = JWT.create()\n                .withIssuer(\"auth0\")\n                .withClaim(\"userId\", userId)\n                .sign(algorithm)\n            token\n        } catch {\n            case e: JWTCreationException => \n            \"\"\n        }\n    }\n}\n"
  : labels:
    - source: Algorithm.HMAC512(secretKey)
      style: primary
      start: 209
      end: 237
    - source: Algorithm
      style: secondary
      start: 209
      end: 218
    - source: HMAC512
      style: secondary
      start: 219
      end: 226
    - source: Algorithm.HMAC512
      style: secondary
      start: 209
      end: 226
    - source: secretKey
      style: secondary
      start: 227
      end: 236
    - source: (secretKey)
      style: secondary
      start: 226
      end: 237
    - source: import com.auth0.jwt.algorithms.Algorithm
      style: secondary
      start: 0
      end: 41
    - source: "import com.auth0.jwt.algorithms.Algorithm\nclass SessionService {\n    val secretKey: String = \"sessionKeySecure\"\n    def createSessionToken(userId: String): String = {\n        try {\n            val algorithm = Algorithm.HMAC512(secretKey)\n            val token = JWT.create()\n                .withIssuer(\"auth0\")\n                .withClaim(\"userId\", userId)\n                .sign(algorithm)\n            token\n        } catch {\n            case e: JWTCreationException => \n            \"\"\n        }\n    }\n}\n"
      style: secondary
      start: 0
      end: 504
    - source: secretKey
      style: secondary
      start: 73
      end: 82
    - source: '"sessionKeySecure"'
      style: secondary
      start: 93
      end: 111
    - source: 'val secretKey: String = "sessionKeySecure"'
      style: secondary
      start: 69
      end: 111
    - source: "def createSessionToken(userId: String): String = {\n        try {\n            val algorithm = Algorithm.HMAC512(secretKey)\n            val token = JWT.create()\n                .withIssuer(\"auth0\")\n                .withClaim(\"userId\", userId)\n                .sign(algorithm)\n            token\n        } catch {\n            case e: JWTCreationException => \n            \"\"\n        }\n    }"
      style: secondary
      start: 116
      end: 501
