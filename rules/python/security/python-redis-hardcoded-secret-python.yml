id: python-redis-hardcoded-secret-python
severity: warning
language: python
message: >-
      A secret is hard-coded in the application. Secrets stored in source
      code, such as credentials, identifiers, and other types of sensitive data,
      can be leaked and used by internal or external malicious actors. Use
      environment variables to securely provide credentials and other secrets or
      retrieve them from a secure vault or Hardware Security Module (HSM).
note: >-
  [CWE-798] Use of Hard-coded Credentials.
  [REFERENCES]
      - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
utils:
  redis.Redis(..., password="...",...):
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: attribute
          pattern: redis.Redis
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: end
            kind: keyword_argument
            all:
              - has:
                  stopBy: neighbor
                  kind: identifier
                  regex: ^password$
              - has:
                  stopBy: neighbor
                  kind: string
                  has:
                     stopBy: end
                     kind: string_content
  redis.Redis(..., password="...",...)_with_instance:
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: attribute
          pattern: redis.Redis
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: end
            kind: keyword_argument
            all:
              - has:
                  stopBy: neighbor
                  kind: identifier
                  regex: ^password$
              - has:
                  stopBy: neighbor
                  kind: identifier
                  pattern: $P
      - inside:
          stopBy: end
          kind: expression_statement
          follows:
            stopBy: end
            kind: expression_statement
            has:
              stopBy: neighbor
              kind: assignment
              all:
                - has:
                   stopBy: end
                   kind: identifier
                   paatern: $P
                - has:
                   stopBy: neighbor
                   kind: string
                   has:
                      stopby: end
                      kind: string_content               
  Redis(..., password="...",...):
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: identifier
          pattern: Redis
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: end
            kind: keyword_argument
            all:
              - has:
                  stopBy: neighbor
                  kind: identifier
                  regex: ^password$
              - has:
                  stopBy: neighbor
                  kind: string
                  has:
                     stopBy: end
                     kind: string_content
      - inside:
          stopBy: end
          kind: module
          has:
            stopBy: end
            kind: import_from_statement
            pattern: from redis import Redis
  Redis(..., password="...",...)_with_instance:
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: identifier
          pattern: Redis
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: end
            kind: keyword_argument
            all:
              - has:
                  stopBy: neighbor
                  kind: identifier
                  regex: ^password$
              - has:
                  stopBy: neighbor
                  kind: identifier
                  pattern: $S
                  nthChild: 2
      - inside:
          stopBy: end
          kind: expression_statement
          follows:
            stopBy: end
            kind: expression_statement
            has:
              stopBy: neighbor
              kind: assignment
              all:
                - has:
                   stopBy: end
                   kind: identifier
                   pattern: $S
                - has:
                   stopBy: neighbor
                   kind: string
                   has:
                      stopby: end
                      kind: string_content
      - inside:
          stopBy: end
          kind: module
          has:
            stopBy: end
            kind: import_from_statement
            pattern: from redis import Redis
rule:
  kind: call
  any:
    - matches: redis.Redis(..., password="...",...)
    - matches: redis.Redis(..., password="...",...)_with_instance
    - matches: Redis(..., password="...",...)
    - matches: Redis(..., password="...",...)_with_instance
