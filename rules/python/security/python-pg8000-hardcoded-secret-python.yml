id: python-pg8000-hardcoded-secret-python
severity: warning
language: python
message: >-
      The application creates a database connection with an empty password.
      This can lead to unauthorized access by either an internal or external
      malicious actor. To prevent this vulnerability, enforce authentication
      when connecting to a database by using environment variables to securely
      provide credentials or retrieving them from a secure vault or HSM
      (Hardware Security Module).
note: >-
  [CWE-287] Improper Authentication.
  [REFERENCES]
      - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
utils:
  pg8000.dbapi.connect(..., password="...",...):
    # pg8000.dbapi.connect(..., password="...",...)
    kind: call
    all:
    - has:
        stopBy: neighbor
        pattern: $DB
        regex: ^pg8000.dbapi.connect|pg8000.native.Connection$
    - has:
        stopBy: neighbor
        kind: argument_list
        has:
          stopBy: end
          kind: keyword_argument
          all:
            - has:
                stopBy: neighbor
                kind: identifier
                regex: ^password$
            - has:
                stopBy: neighbor
                kind: string
                has:
                   stopBy: neighbor
                   kind: string_content
  pg8000.dbapi.connect(..., password=$VAR,...):
    # pg8000.dbapi.connect(..., password=$VAR,...)_with_instance
    kind: call
    all:
    - has:
        stopBy: neighbor
        pattern: $DB
        regex: ^pg8000.dbapi.connect|pg8000.native.Connection$
    - has:
        stopBy: neighbor
        kind: argument_list
        has:
          stopBy: end
          kind: keyword_argument
          all:
            - has:
                stopBy: neighbor
                kind: identifier
                regex: ^password|passwd$
            - has:
                stopBy: neighbor
                kind: identifier
                pattern: $R
                nthChild: 2
    - inside:
        stopBy: end
        kind: expression_statement
        follows: 
          stopBy: end
          kind: expression_statement
          has:
              stopBy: neighbor
              kind: assignment
              all:
                - has:
                    stopBy: neighbor
                    kind: identifier
                    pattern: $R
                - has:
                    stopBy: neighbor
                    kind: string
                    has:
                       stopBy: neighbor
                       kind: string_content
  connect(..., password="...",...):
    # connect(..., password="...",...)
    kind: call
    all:
    - has:
        stopBy: neighbor
        pattern: $DB
        regex: ^connect$
    - has:
        stopBy: neighbor
        kind: argument_list
        has:
          stopBy: end
          kind: keyword_argument
          all:
            - has:
                stopBy: neighbor
                kind: identifier
                regex: ^password$
            - has:
                stopBy: neighbor
                kind: string
                has:
                   stopBy: neighbor
                   kind: string_content
    - inside:
        stopBy: end
        kind: module
        any:
        - has:
           stopBy: end
           kind: import_from_statement
           any:
            - pattern: from pg8000.dbapi import connect
            - pattern: from pg8000.native import connect
  connect(..., password=$VAR,...):
    # connect(..., password=$VAR,...)
    kind: call
    all:
    - has:
        stopBy: neighbor
        pattern: $DB
        regex: ^connect$
    - has:
        stopBy: neighbor
        kind: argument_list
        has:
          stopBy: end
          kind: keyword_argument
          all:
            - has:
                stopBy: neighbor
                kind: identifier
                regex: ^password$
            - has:
                stopBy: neighbor
                kind: identifier
                pattern: $Z
                nthChild: 2
    - inside:
        stopBy: end
        kind: module
        has:
          stopBy: end
          kind: import_from_statement
          any:
            - pattern: from pg8000.dbapi import connect
            - pattern: from pg8000.native import connect
    - inside:
        stopBy: end
        kind: expression_statement
        follows:
          stopBy: end
          kind: expression_statement
          has:
            stopBy: neighbor
            kind: assignment
            all:
              - has:
                  stopBy: neighbor
                  kind: identifier
                  pattern: $Z
              - has:
                  stopBy: neighbor
                  kind: string
                  has:
                    stopBy: neighbor
                    kind: string_content
  $$$.connect(..., password=$VAR,...):
    # $$$.connect(..., password=$VAR,...)
    kind: call
    all:
    - has:
        stopBy: neighbor
        kind: attribute
        all:
          - has:
              stopBy: neighbor
              kind: identifier
              pattern: $PG
              nthChild: 1
          - has:
              stopBy: neighbor
              kind: identifier
              regex: ^Connection$
    - has:
        stopBy: neighbor
        kind: argument_list
        has:
          stopBy: end
          kind: keyword_argument
          all:
            - has:
                stopBy: neighbor
                kind: identifier
                regex: ^password$
            - has:
                stopBy: neighbor
                kind: identifier
                pattern: $A
                nthChild: 2
    - inside:
        stopBy: end
        kind: module
        has:
          stopBy: end
          kind: import_statement
          has:
            stopBy: neighbor
            kind: aliased_import
            all:
              - has:
                  stopBy: neighbor
                  kind: dotted_name
                  regex: ^pg8000.native$
              - has:
                  stopBy: neighbor
                  kind: identifier
                  pattern: $PG
    - inside:
        stopBy: end
        kind: expression_statement
        follows:
          stopBy: end
          kind: expression_statement
          has:
            stopBy: neighbor
            kind: assignment
            all:
              - has:
                  stopBy: neighbor
                  kind: identifier
                  pattern: $A
              - has:
                  stopBy: neighbor
                  kind: string
                  has:
                    stopBy: neighbor
                    kind: string_content
rule:
  kind: call
  any:
    - matches: pg8000.dbapi.connect(..., password="...",...)
    - matches: pg8000.dbapi.connect(..., password=$VAR,...)
    - matches: connect(..., password="...",...)
    - matches: connect(..., password=$VAR,...)
    - matches: $$$.connect(..., password=$VAR,...)
