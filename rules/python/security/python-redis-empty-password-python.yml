id: python-redis-empty-password-python
severity: warning
language: python
message: >-
      The application creates a database connection with an empty password.
      This can lead to unauthorized access by either an internal or external
      malicious actor. To prevent this vulnerability, enforce authentication
      when connecting to a database by using environment variables to securely
      provide credentials or retrieving them from a secure vault or HSM
      (Hardware Security Module).
note: >-
  [CWE-287] Improper Authentication.
  [REFERENCES]
      - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
utils:
  redis.Redis(..., password="",...):
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: attribute
          pattern: redis.Redis
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: end
            kind: keyword_argument
            all:
              - has:
                  stopBy: neighbor
                  kind: identifier
                  regex: ^password$
              - has:
                  stopBy: neighbor
                  kind: string
                  not:
                    has:
                     stopBy: end
                     kind: string_content
  redis.Redis(..., password="",...)_with_instance:
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: attribute
          pattern: redis.Redis
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: end
            kind: keyword_argument
            all:
              - has:
                  stopBy: neighbor
                  kind: identifier
                  regex: ^password$
              - has:
                  stopBy: neighbor
                  kind: identifier
                  pattern: $P
      - inside:
          stopBy: end
          kind: expression_statement
          follows:
            stopBy: end
            kind: expression_statement
            has:
              stopBy: neighbor
              kind: assignment
              all:
                - has:
                   stopBy: end
                   kind: identifier
                   paatern: $P
                - has:
                   stopBy: neighbor
                   kind: string
                   not:
                    has:
                      stopby: end
                      kind: string_content               
  Redis(..., password="",...):
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: identifier
          pattern: Redis
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: end
            kind: keyword_argument
            all:
              - has:
                  stopBy: neighbor
                  kind: identifier
                  regex: ^password$
              - has:
                  stopBy: neighbor
                  kind: string
                  not:
                    has:
                     stopBy: end
                     kind: string_content
      - inside:
          stopBy: end
          kind: module
          has:
            stopBy: end
            kind: import_from_statement
            pattern: from redis import Redis
  Redis(..., password="",...)_with_instance:
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: identifier
          pattern: Redis
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: end
            kind: keyword_argument
            all:
              - has:
                  stopBy: neighbor
                  kind: identifier
                  regex: ^password$
              - has:
                  stopBy: neighbor
                  kind: identifier
                  pattern: $S
                  nthChild: 2
      - inside:
          stopBy: end
          kind: expression_statement
          follows:
            stopBy: end
            kind: expression_statement
            has:
              stopBy: neighbor
              kind: assignment
              all:
                - has:
                   stopBy: end
                   kind: identifier
                   pattern: $S
                - has:
                   stopBy: neighbor
                   kind: string
                   not:
                    has:
                      stopby: end
                      kind: string_content
      - inside:
          stopBy: end
          kind: module
          has:
            stopBy: end
            kind: import_from_statement
            pattern: from redis import Redis
rule:
  kind: call
  any:
    - matches: redis.Redis(..., password="",...)
    - matches: redis.Redis(..., password="",...)_with_instance
    - matches: Redis(..., password="",...)
    - matches: Redis(..., password="",...)_with_instance
