id: world-writable-file-cpp
language: cpp
severity: warning
message: >-
  This call makes a world-writable file which allows any user on a
  machine to write to the file. This may allow attackers to influence the
  behaviour of this process by writing to the file.
note: >-
  [CWE-732]: Incorrect Permission Assignment for Critical Resource
  [REFERENCES]
      - https://wiki.sei.cmu.edu/confluence/display/c/FIO06-C.+Create+files+with+appropriate+access+permissions
utils:
  match_identifier_with_stringliteral_mode:
    kind: identifier
    pattern: $MODE
    follows:
      stopBy: end
      kind: string_literal
      has:
        stopBy: end
        kind: string_content
    inside:
      stopBy: end
      kind: argument_list
      inside:
        kind: call_expression
        has:
          kind: identifier
          regex: ^(chmod|fchmod|fchmodat|open|openat|creat)$
        inside:
          kind: expression_statement
          follows:
            stopBy: end
            kind: declaration
            all:
              - has:
                  kind: type_identifier
              - has:
                  kind: init_declarator
                  all:
                    - has:
                        kind: identifier
                        field: declarator
                        pattern: $MODE
                    - has:
                        kind: number_literal
                        field: value
                        pattern: $BINARY
  match_identifier_with_identifier_mode:
    kind: identifier
    pattern: $MODE
    inside:
      stopBy: end
      kind: argument_list
      has:
        stopBy: end
        kind: identifier
      inside:
        stopBy: end
        kind: call_expression
        has:
          stopBy: end
          kind: identifier
          regex: "^fchmod$"
        inside:
          stopBy: end
          kind: expression_statement
          follows:
            stopBy: end
            kind: declaration
            all:
              - has:
                  kind: type_identifier
              - has:
                  kind: init_declarator
                  all:
                    - has:
                        kind: identifier
                        field: declarator
                        pattern: $MODE
                    - has:
                        kind: number_literal
                        field: value
                        pattern: $BINARY
  match_binary_expression:
    kind: binary_expression
    all:
      - has:
          kind: binary_expression
          has:
            kind: identifier
            regex: ^(S_IWOTH|S_IWUSR|S_IGRP|S_IROTH|S_IRUSR|S_IWOTH)$
      - has:
          kind: identifier
          regex: ^(S_IWOTH|S_IWUSR|S_IGRP|S_IRUSR|S_IWOTH)$
    inside:
      stopBy: end
      kind: call_expression
      has:
        kind: identifier
        regex: (chmod|fchmod|fchmodat|open|openat)
      inside:
        kind: expression_statement
  match_binary_with_identifier:
    kind: identifier
    regex: "^S_IWOTH$"
    follows:
      stopBy: end
      kind: string_literal
      has:
        kind: string_content
      inside:
        stopBy: end
        kind: argument_list
        inside:
          kind: call_expression
          has:
            kind: identifier
          inside:
            kind: expression_statement
  match_binary_with_two_identifier:
    kind: binary_expression
    all:
      - has:
          kind: identifier
          regex: ^(S_IWUSR)$
      - has:
          kind: identifier
          regex: ^(S_IWOTH)$
    inside:
      kind: argument_list
      inside:
        kind: call_expression
        has:
          kind: identifier
          regex: ^(open)$
  match_binary_expression_with_three_identifier:
    kind: binary_expression
    all:
      - has:
          kind: binary_expression
          all:
            - has:
                kind: identifier
                regex: ^(S_IWOTH)$
            - has:
                kind: identifier
                regex: ^(S_IUSR)$
      - has:
          kind: identifier
          regex: ^(S_IGRP)$
    inside:
      kind: argument_list
      inside:
        kind: call_expression
        has:
          kind: identifier
          regex: ^(openat)$
        inside:
          kind: expression_statement

rule:
  any:
    - matches: match_identifier_with_stringliteral_mode
    - matches: match_identifier_with_identifier_mode
    - matches: match_binary_expression
    - matches: match_binary_with_identifier
    - matches: match_binary_with_two_identifier
    - matches: match_binary_expression_with_three_identifier
constraints:
  BINARY:
    regex: ^0[0-7]*[2367]$
