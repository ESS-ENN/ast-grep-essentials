id: ruby-excon-hardcoded-secret-ruby
language: ruby
severity: warning
message: >-
  A secret is hard-coded in the application. Secrets stored in source
  code, such as credentials, identifiers, and other types of sensitive data,
  can be leaked and used by internal or external malicious actors. Use
  environment variables to securely provide credentials and other secrets or
  retrieve them from a secure vault or Hardware Security Module (HSM).
note: >-
  [CWE-798] Use of Hard-coded Credentials.
  [REFERENCES]
      - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
utils:
 Excon.new(..., :password => "...", ...):
        # Excon.new(..., :password => "...", ...)
     kind: call
     all:
     - has:
        stopBy: neighbor
        kind: constant
        regex: ^Excon$
     - has:
           stopBy: neighbor
           regex: ^.$
     - has:
           stopBy: neighbor
           kind: identifier
           regex: ^new$
     - has:
        stopBy: neighbor      
        kind: argument_list
        has:
         stopBy: end
         kind: pair
         all:
         - has:
            stopBy: neighbor
            kind: simple_symbol 
            regex: ^:password$
         - has:
              stopBy: neighbor
              kind: string
              has:
                 stopBy: neighbor
                 kind: string_content
     - inside:
          stopBy: end
          kind: program
          has:
             stopBy: end
             kind: call
             pattern: require 'excon'
 Excon.new(..., :password => "...", ...)_with_instance:
        # Excon.new(..., :password => "...", ...)
     kind: call
     all:
     - has:
        stopBy: neighbor
        kind: constant
        regex: ^Excon$
     - has:
           stopBy: neighbor
           regex: ^.$
     - has:
           stopBy: neighbor
           kind: identifier
           regex: ^new$
     - has:
        stopBy: neighbor      
        kind: argument_list
        has:
         stopBy: end
         kind: pair
         all:
         - has:
            stopBy: neighbor
            kind: simple_symbol 
            regex: ^:password$
         - has:
              stopBy: neighbor
              kind: identifier
              pattern: $PSWD
     - inside:
        stopBy: end
        kind: assignment
        follows:
           stopBy: end
           kind: assignment
           all:
              - has:
                   stopBy: neighbor
                   kind: identifier
                   pattern: $PSWD
              - has:
                   stopBy: neighbor
                   kind: string
                   has:
                      stopBy: neighbor
                      kind: string_content
     - inside:
          stopBy: end
          kind: program
          has:
             stopBy: end
             kind: call
             pattern: require 'excon'
 Excon.new(..., :password => Excon::Utils.escape_uri("..."), ...):
    # Excon.new(..., :password => Excon::Utils.escape_uri("..."), ...)
   kind: call
   all:
     - has:
        stopBy: neighbor
        kind: constant
        regex: ^Excon$
     - has:
           stopBy: neighbor
           regex: ^.$
     - has:
           stopBy: neighbor
           kind: identifier
           regex: ^new$
     - has:
        stopBy: neighbor      
        kind: argument_list
        has:
         stopBy: end
         kind: pair
         all:
         - has:
            stopBy: neighbor
            kind: simple_symbol 
            regex: ^:password$
         - has:
              stopBy: neighbor
              kind: call
              all:
                 - has:
                      stopBy: neighbor
                      kind: scope_resolution
                      regex: ^Excon::Utils$
                 - has:
                      stopBy: neighbor
                      regex: ^.$
                 - has:
                      stopBy: neighbor
                      kind: identifier
                      regex: ^escape_uri$
                 - has:
                      stopBy: neighbor
                      kind: argument_list
                      has:
                         stopBy: neighbor
                         kind: string
                         has:
                            stopBy: neighbor
                            kind: string_content
     - inside:
          stopBy: end
          kind: program
          has:
             stopBy: end
             kind: call
             pattern: require 'excon'
 Excon.new(..., :password => Excon::Utils.escape_uri("..."), ...)_with_instance:
    # Excon.new(..., :password => Excon::Utils.escape_uri("..."), ...)
   kind: call
   all:
     - has:
        stopBy: neighbor
        kind: constant
        regex: ^Excon$
     - has:
           stopBy: neighbor
           regex: ^.$
     - has:
           stopBy: neighbor
           kind: identifier
           regex: ^new$
     - has:
        stopBy: neighbor      
        kind: argument_list
        has:
         stopBy: end
         kind: pair
         all:
         - has:
            stopBy: neighbor
            kind: simple_symbol 
            regex: ^:password$
         - has:
              stopBy: neighbor
              kind: call
              all:
                 - has:
                      stopBy: neighbor
                      kind: scope_resolution
                      regex: ^Excon::Utils$
                 - has:
                      stopBy: neighbor
                      regex: ^.$
                 - has:
                      stopBy: neighbor
                      kind: identifier
                      regex: ^escape_uri$
                 - has:
                      stopBy: neighbor
                      kind: argument_list
                      has:
                         stopBy: neighbor
                         kind: identifier
                         pattern: $PASS
     - inside:
          stopBy: end
          kind: program
          has:
             stopBy: end
             kind: call
             pattern: require 'excon'
     - inside:
          stopBy: end
          kind: assignment
          follows:
           stopBy: end
           kind: assignment
           all:
              - has:
                   stopBy: neighbor
                   kind: identifier
                   pattern: $PASS
              - has:
                   stopBy: neighbor
                   kind: string
                   has:
                      stopBy: neighbor
                      kind: string_content
             
rule:
    kind: call
    any:
        - matches: Excon.new(..., :password => "...", ...)
        - matches: Excon.new(..., :password => "...", ...)_with_instance
        - matches: Excon.new(..., :password => Excon::Utils.escape_uri("..."), ...)
        - matches: Excon.new(..., :password => Excon::Utils.escape_uri("..."), ...)_with_instance
