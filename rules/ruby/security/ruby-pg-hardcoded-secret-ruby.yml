id: ruby-pg-hardcoded-secret-ruby
language: ruby
severity: warning
message: >-
  A secret is hard-coded in the application. Secrets stored in source
  code, such as credentials, identifiers, and other types of sensitive data,
  can be leaked and used by internal or external malicious actors. Use
  environment variables to securely provide credentials and other secrets or
  retrieve them from a secure vault or Hardware Security Module (HSM).
note: >-
  [CWE-798] Use of Hard-coded Credentials.
  [REFERENCES]
      - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
utils:
  PG.connect(password:""):
    # PG::Connection.new(..., password: '', ...)
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: constant
          regex: ^PG$
      - has:
          stopBy: neighbor
          regex: ^.$
      - has:
          stopBy: neighbor
          kind: identifier
          regex: ^connect$
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: end
            kind: pair
            all:
              - has:
                  stopBy: neighbor
                  regex: ^password|:password$
              - has:
                  stopBy: neighbor
                  kind: string
                  has:
                   stopBy: neighbor
                   kind: string_content
  PG.connect($HOST, $PORT, $OPS, $TTY, $DB, $USER, ""):
    # PG.connect($HOST, $PORT, $OPS, $TTY, $DB, $USER, "", ...)
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: constant
          regex: ^PG$
      - has:
          stopBy: neighbor
          regex: ^.$
      - has:
          stopBy: neighbor
          kind: identifier
          regex: ^connect$
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: neighbor
            kind: string
            nthChild: 7
            has:
                stopBy: neighbor
                kind: string_content
  PG.connect($HOST, $PORT, $OPS, $TTY, $DB, $USER, "")_with_instance:
  # PG.connect($HOST, $PORT, $OPS, $TTY, $DB, $USER, "")_with_instance
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: constant
          regex: ^PG$
      - has:
          stopBy: neighbor
          regex: ^.$
      - has:
          stopBy: neighbor
          kind: identifier
          regex: ^connect$
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: neighbor
            kind: identifier
            pattern: $PASS
            nthChild: 7
      - inside:
          stopBy: end
          kind: program
          has:
            stopBy: end
            kind: assignment
            pattern: $PASS = '$$$'
  PG.connect(password:"")_with_instance:
    # PG.connect(..., password: "", ...)
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: constant
          regex: ^PG$
      - has:
          stopBy: neighbor
          regex: ^.$
      - has:
          stopBy: neighbor
          kind: identifier
          regex: ^connect$
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: end
            kind: pair
            all:
              - has:
                  stopBy: neighbor
                  regex: ^password|:password$
              - has:
                  stopBy: neighbor
                  kind: identifier
                  pattern: $PASS
      - inside:
          stopBy: end
          kind: program
          has:
            stopBy: end
            kind: assignment
            pattern: $PASS = '$$$'
  PG::Connection.new(password:"")_with_instance:
    # PG::Connection.new(..., password: '', ...)
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: scope_resolution
          regex: ^PG::Connection$
      - has:
          stopBy: neighbor
          regex: ^.$
      - has:
          stopBy: neighbor
          kind: identifier
          regex: ^new|connect_start$
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: end
            kind: pair
            all:
              - has:
                  stopBy: neighbor
                  regex: ^password|:password$
              - has:
                  stopBy: neighbor
                  kind: identifier
                  pattern: $PASS
      - inside:
          stopBy: end
          kind: program
          has:
            stopBy: end
            kind: assignment
            pattern: $PASS = '$$$'
  PG::Connection.new($HOST, $PORT, $OPS, $TTY, $DB, $USER, ""):
    # PG::Connection.connect_start($HOST, $PORT, $OPS, $TTY, $DB, $USER,"", ...)
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: scope_resolution
          regex: ^PG::Connection$
      - has:
          stopBy: neighbor
          regex: ^.$
      - has:
          stopBy: neighbor
          kind: identifier
          regex: ^connect_start|new$
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: neighbor
            kind: string
            nthChild: 7
            has:
                stopBy: neighbor
                kind: string_content
  PG::Connection.new($HOST, $PORT, $OPS, $TTY, $DB, $USER, "")_with_instance:
    # PG::Connection.connect_start($HOST, $PORT, $OPS, $TTY, $DB, $USER,"", ...)
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: scope_resolution
          regex: ^PG::Connection$
      - has:
          stopBy: neighbor
          regex: ^.$
      - has:
          stopBy: neighbor
          kind: identifier
          regex: ^connect_start|new$
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: neighbor
            kind: identifier
            nthChild: 7
            pattern: $PASS
      - inside:
          stopBy: end
          kind: program
          has:
            stopBy: end
            kind: assignment
            pattern: $PASS = '$$$'
  PG::Connection.new(password:""):
  # PG::Connection.new(..., password: '', ...)
    kind: call
    all:
      - has:
          stopBy: neighbor
          kind: scope_resolution
          regex: ^PG::Connection$
      - has:
          stopBy: neighbor
          regex: ^.$
      - has:
          stopBy: neighbor
          kind: identifier
          regex: ^new|connect_start$
      - has:
          stopBy: neighbor
          kind: argument_list
          has:
            stopBy: end
            kind: pair
            all:
              - has:
                  stopBy: neighbor
                  regex: ^password|:password$
              - has:
                  stopBy: neighbor
                  kind: string
                  has:
                      stopBy: neighbor
                      kind: string_content
rule:
  kind: call
  any:
    - matches: PG.connect(password:"")
    - matches: PG.connect(password:"")_with_instance
    - matches: PG.connect($HOST, $PORT, $OPS, $TTY, $DB, $USER, "")
    - matches: PG.connect($HOST, $PORT, $OPS, $TTY, $DB, $USER, "")_with_instance
    - matches: PG::Connection.new(password:"")_with_instance
    - matches: PG::Connection.new($HOST, $PORT, $OPS, $TTY, $DB, $USER, "")
    - matches: PG::Connection.new($HOST, $PORT, $OPS, $TTY, $DB, $USER, "")_with_instance
    - matches: PG::Connection.new(password:"")
